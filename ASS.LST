     1                                  [org 0x0100]
     2                                  
     3 00000000 EB0E                    jmp start
     4                                  
     5 00000002 2F0048001F00            Example: dw 47, 72, 31
     6 00000008 0000                    sum_of_two_digit: dw 0
     7 0000000A 0000                    max_sum_digit: dw 0
     8 0000000C 0A00                    divider: dw 10
     9 0000000E 0000                    temp: dw 0
    10                                  
    11                                  
    12                                  start:
    13                                  
    14                                  ;Subroutine_Function:
    15 00000010 B80000                  mov ax,0
    16 00000013 BB0000                  mov bx,0
    17 00000016 B90000                  mov cx,0
    18 00000019 BA0000                  mov dx,0
    19                                  
    20 0000001C 8B87[0200]              mov ax,[Example+bx]     ;; static for 1st value of the array ;; we ll store first value sum to compare with other sums..
    21 00000020 8BB7[0200]                  mov si,[Example+bx] 
    22 00000024 F736[0C00]                  div word[divider]       ;; it ll divide every coming value with 10
    23 00000028 0006[0800]                  add [sum_of_two_digit],al  ;; it ll add the quotiont in label e.g 47-> 0+4=4
    24 0000002C 0116[0800]                  add word[sum_of_two_digit],dx ;; it ll add the remainder in the previous same label e.g 47-> 4+7=11
    25                                     ; mov [max_sum_digit],ax  ;; it ll put the value of ax e.g 47 in the label 
    26                                  
    27                                  loop:
    28 00000030 31C0                        xor ax,ax
    29 00000032 31D2                        xor dx,dx
    30 00000034 8B87[0400]                  mov ax,word[Example+bx+2]   ;; now ax ll get the 2nd value in the of array ,, 
    31 00000038 F736[0C00]                  div word[divider]           ;; divider
    32 0000003C 0006[0E00]                  add [temp],al           ;; temporarily save the val of all in temp label;;;; it ll add the quotiont in label e.g 47-> 0+4=4
    33 00000040 0116[0E00]                  add word[temp],dx       ;; ll save the val of dx in temp label ;;it ll add the remainder in the previous same label e.g 47-> 4+7=11
    34 00000044 8B0E[0E00]                  mov cx,[temp]           ;; it ll put the value of ax e.g 47 in the label
    35                                      ;add dx,al
    36 00000048 390E[0800]                  cmp [sum_of_two_digit],cx    ;; here we ll compare the the sum of 1st value of array with summ 0f 2nd val of array
    37 0000004C 7D03                        jge checker                     ;; if
    38 0000004E A3[0A00]                        mov word[max_sum_digit ] ,ax    ;; it ll update the max_sum_digit in the label after comparing
    39                                          checker:                    ;; after tht
    40 00000051 83C302                          add bx,2                    ;; move 2 steps in array
    41 00000054 83FB06                  cmp bx,6                        ;; chechks end loop condition
    42 00000057 75D7                    jne loop            ;; loop if
    43                                  
    44                                  
    45                                  
    46                                  
    47                                  ;; Main Function
    48                                   ;start:
    49                                   ;mov ax,0
    50                                   ;mov bx,0
    51                                   ;mov dx,0
    52                                         
    53                                          ;call Subroutine_Function ;; Calling the function
    54                                  
    55                                  
    56                                  
    57                                  
    58 00000059 B8004C                  mov  ax, 0x4c00
    59 0000005C CD21                    int  0x21
